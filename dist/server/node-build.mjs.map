{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/generate-variations.ts","../../server/routes/download-image.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { RequestHandler } from \"express\";\nimport multer from \"multer\";\nimport { OpenAI } from \"openai\";\n\n// Configure multer for memory storage\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed!'));\n    }\n  }\n});\n\n// OpenAI will be instantiated only when needed to avoid startup errors\n\nexport const uploadMiddleware = upload.fields([\n  { name: 'dress', maxCount: 1 },\n  { name: 'person', maxCount: 1 }\n]);\n\nexport const handleGenerateVariations: RequestHandler = async (req, res) => {\n  try {\n    const files = req.files as { [fieldname: string]: Express.Multer.File[] };\n    \n    if (!files?.dress?.[0] || !files?.person?.[0]) {\n      return res.status(400).json({ \n        error: 'Both dress and person images are required' \n      });\n    }\n\n    const dressFile = files.dress[0];\n    const personFile = files.person[0];\n\n    // Check if OpenAI API key is configured\n    if (!process.env.OPENAI_API_KEY) {\n      console.warn('OpenAI API key not configured, returning placeholder results');\n\n      // Return placeholder results for demo purposes\n      const placeholderImages = Array.from({ length: 5 }, (_, i) => ({\n        id: `placeholder-${i + 1}`,\n        url: '/fashion-placeholder.svg',\n      }));\n\n      return res.json({\n        images: placeholderImages,\n        message: 'Demo mode - OpenAI API key not configured'\n      });\n    }\n\n    // Initialize OpenAI client only when API key is available\n    const openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY,\n    });\n\n    // Convert images to base64 for OpenAI Vision API\n    const dressBase64 = dressFile.buffer.toString('base64');\n    const personBase64 = personFile.buffer.toString('base64');\n\n    // First, use GPT-4 Vision to analyze the uploaded images\n    console.log('Analyzing uploaded images with GPT-4 Vision...');\n\n    let imageAnalysis = '';\n\n    try {\n      const analysisResponse = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"user\",\n            content: [\n              {\n                type: \"text\",\n                text: \"Analyze these two images carefully: 1) A dress/outfit, 2) A person/model. Provide a detailed description that will be used for AI image generation. Focus on:\\n\\nFor the DRESS:\\n- Exact color, style, length, cut\\n- Fabric type and texture\\n- Sleeves, neckline, silhouette\\n- Any patterns, prints, or details\\n- Overall design characteristics\\n\\nFor the PERSON:\\n- Body type, height, build\\n- Skin tone, hair color and style\\n- Facial features (if visible)\\n- Any distinctive characteristics\\n\\nProvide a comprehensive description that will help generate images of this exact person wearing this exact dress in different poses.\"\n              },\n              {\n                type: \"image_url\",\n                image_url: {\n                  url: `data:${dressFile.mimetype};base64,${dressBase64}`\n                }\n              },\n              {\n                type: \"image_url\",\n                image_url: {\n                  url: `data:${personFile.mimetype};base64,${personBase64}`\n                }\n              }\n            ]\n          }\n        ],\n        max_tokens: 500\n      });\n\n      imageAnalysis = analysisResponse.choices[0]?.message?.content || 'Could not analyze images';\n      console.log('Image analysis complete:', imageAnalysis);\n\n    } catch (visionError) {\n      console.error('Vision API error:', visionError);\n      imageAnalysis = 'Image analysis failed - will use basic generation';\n    }\n\n    const poses = [\n      \"standing straight with arms at sides, front-facing view\",\n      \"three-quarter turn pose with one hand on hip\",\n      \"walking pose with natural arm swing\",\n      \"sitting elegantly on a minimalist stool\",\n      \"side profile pose with arms gracefully positioned\"\n    ];\n\n    const generatedImages = [];\n\n    // Generate 5 variations with different poses using the analyzed image descriptions\n    for (let i = 0; i < 5; i++) {\n      try {\n        let prompt = '';\n\n        if (imageAnalysis && imageAnalysis !== 'Image analysis failed - will use basic generation') {\n          // Use detailed analysis from vision API\n          prompt = `Create a professional fashion photograph based on these specifications:\n\nPERSON & DRESS ANALYSIS:\n${imageAnalysis}\n\nPOSE REQUIREMENT: ${poses[i]}\n\nGENERATION INSTRUCTIONS:\n- Use the EXACT person described above wearing the EXACT dress described above\n- The person's appearance must match the analysis (body type, skin tone, hair, facial features)\n- The dress must be identical in every detail (color, pattern, fabric, cut, style, length)\n- Only change the pose/positioning as specified\n- Maintain high-quality fashion photography standards\n- Use professional studio lighting with clean, neutral background\n- Ensure the dress fits the person naturally and realistically\n- Keep consistent lighting and background across all variations\n\nStyle: Professional fashion photography, studio quality, clean composition`;\n        } else {\n          // Fallback prompt when vision analysis fails\n          prompt = `Create a professional fashion photograph of a model wearing a dress in this pose: ${poses[i]}.\n\nProfessional fashion photography style, studio lighting, clean neutral background, high quality, detailed dress design, elegant pose.`;\n        }\n\n        console.log(`Generating variation ${i + 1} with pose: ${poses[i]}`);\n\n        const response = await openai.images.generate({\n          model: \"dall-e-3\",\n          prompt: prompt,\n          n: 1,\n          size: \"1024x1024\",\n          quality: \"hd\",\n        });\n\n        if (response.data?.[0]?.url) {\n          generatedImages.push({\n            id: `generated-${i + 1}`,\n            url: response.data[0].url,\n          });\n          console.log(`✅ Successfully generated variation ${i + 1}`);\n        } else {\n          console.log(`⚠️ No image data received for variation ${i + 1}`);\n          generatedImages.push({\n            id: `fallback-${i + 1}`,\n            url: '/fashion-placeholder.svg',\n          });\n        }\n      } catch (error) {\n        console.error(`❌ Error generating image ${i + 1}:`, error);\n        // Add placeholder if generation fails\n        generatedImages.push({\n          id: `fallback-${i + 1}`,\n          url: '/fashion-placeholder.svg',\n        });\n      }\n    }\n\n    res.json({ \n      images: generatedImages,\n      message: 'Images generated successfully'\n    });\n\n  } catch (error) {\n    console.error('Error in generate-variations:', error);\n    \n    // Return placeholder results on error\n    const placeholderImages = Array.from({ length: 5 }, (_, i) => ({\n      id: `error-placeholder-${i + 1}`,\n      url: '/fashion-placeholder.svg',\n    }));\n\n    res.status(500).json({ \n      images: placeholderImages,\n      error: 'Failed to generate images, showing placeholders',\n      message: 'Error occurred during generation'\n    });\n  }\n};\n","import { RequestHandler } from \"express\";\n\nexport const handleImageDownload: RequestHandler = async (req, res) => {\n  try {\n    const { url } = req.query;\n    \n    if (!url || typeof url !== 'string') {\n      return res.status(400).json({ error: 'Image URL is required' });\n    }\n\n    // Fetch the image from the external URL\n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch image: ${response.status}`);\n    }\n\n    // Get the image data\n    const imageBuffer = await response.arrayBuffer();\n    const buffer = Buffer.from(imageBuffer);\n\n    // Set appropriate headers for download\n    res.setHeader('Content-Type', response.headers.get('content-type') || 'image/jpeg');\n    res.setHeader('Content-Length', buffer.length);\n    res.setHeader('Content-Disposition', 'attachment; filename=\"fashion-variation.jpg\"');\n    \n    // Send the image data\n    res.send(buffer);\n\n  } catch (error) {\n    console.error('Download proxy error:', error);\n    res.status(500).json({ error: 'Failed to download image' });\n  }\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleGenerateVariations, uploadMiddleware } from \"./routes/generate-variations\";\nimport { handleImageDownload } from \"./routes/download-image\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Image generation endpoint\n  app.post(\"/api/generate-variations\", uploadMiddleware, handleGenerateVariations);\n\n  // Image download proxy endpoint\n  app.get(\"/api/download-image\", handleImageDownload);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express"],"mappings":"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"}